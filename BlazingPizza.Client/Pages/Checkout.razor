@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="main">
    <AuthorizeView Context="authContext">

        <NotAuthorized>
            <h2>Redirecting you...</h2>
        </NotAuthorized>

        <Authorized>
            <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">

                @if (invalidAddress)
                {
                    <div>
                        <h2>Address was invalid</h2>
                        <a class="btn btn-outline-danger" href="checkout" @onclick="@(() => invalidAddress = false)">Try again</a>
                    </div>
                }
                else
                {
                    <div class="checkout-cols">
                        <div class="checkout-order-details">
                            <h4>Review order</h4>
                            <OrderReview Order="OrderState.Order" />
                        </div>

                        <div class="checkout-delivery-address">
                            <h4>Deliver to...</h4>
                            <AddressEditor Address="@OrderState.Order.DeliveryAddress" />
                        </div>
                    </div>

                    <button class="checkout-button btn btn-warning" type="submit" disabled="@(!isSubmitting ? null : "disabled")">Place order</button>
                }

                <DataAnnotationsValidator />
            </EditForm>
        </Authorized>

    </AuthorizeView>
</div>

@code {

    bool isSubmitting { get; set; } = false;
    bool invalidAddress { get; set; } = false;

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            await LocalStorage.SetAsync(JSRuntime, "currentorder", OrderState.Order);
            NavigationManager.NavigateTo("user/signin?redirectUri=/checkout", true);
        }

        if (!OrderState.Order.Pizzas.Any())
        {
            var savedOrder = await LocalStorage.GetAsync<Order>(JSRuntime, "currentorder");
            if (savedOrder != null)
            {
                OrderState.ReplaceOrder(savedOrder);
                await LocalStorage.DeleteAsync(JSRuntime, "currentorder");
            }
            else
            {
                NavigationManager.NavigateTo("");
            }

        }
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;
        try
        {
            var newOrderId = await HttpClient.PostJsonAsync<int>("orders", OrderState.Order);

            if (newOrderId != 0)
            {
                invalidAddress = false;
                OrderState.ResetOrder();
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            }
            else
            {
                invalidAddress = true;
            }
        }
        catch
        {
            // do nothing
        }
        finally
        {
            isSubmitting = false;
        }
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            await HttpClient.PutJsonAsync<object>("notifications/subscribe", subscription);
        }
    }

}
