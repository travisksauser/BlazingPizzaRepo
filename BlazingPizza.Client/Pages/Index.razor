@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NotifierService NotifierService
@inject IJSRuntime JS
@*@implements IDisposable*@

    <div class="main">
        <ul class="pizza-cards">
            @if (specials != null)
            {
                @foreach (var special in specials)
                {
                    <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                        <div class="pizza-info" style="font-size:90%">
                            <span class="title">@special.Name</span>
                            @special.Description
                            <span class="price">@special.GetFormattedBasePrice()</span>
                        </div>
                    </li>
                }
            }
        </ul>
        
    </div>

    <div class="sidebar @(OrderState.Order.Pizzas.Any() ? "" : "collapsed")">
        @if (OrderState.Order.Pizzas.Any())
        {
            <div class="order-contents">
                <h2>Your order</h2>

                @foreach (var configuredPizza in OrderState.Order.Pizzas)
                {
                    <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
                }
            </div>
        }
        else
        {
            <div class="empty-cart">Choose a pizza<br>to get started</div>
        }

        <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
            Total 
            <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
            <a href="checkout" class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)">
                Order >
            </a>
        </div>
    </div>



<TemplatedDialog Show="OrderState.showingConfigureDialog" Exit="OrderState.ExitConfigurePizzaDialog">
    <ConfigurePizzaDialog Pizza="OrderState.configuringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog"                          
                          Continue="OrderState.ContinueConfigurePizzaDialog" 
                          Exit="OrderState.ExitConfigurePizzaDialog"/>
</TemplatedDialog>


@code {

    List<PizzaSpecial> specials;

    protected async override Task OnInitializedAsync()
    {
        specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");

        //NotifierService.Notify += OnNotify;
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JS.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }

    #region
    //public bool showSignIn = false;
    //Cascading Parameter Communication
    //NotifyService class Communication
    //@if (showSignIn)
    @*{
            <SignInOptions />
        }*@
    //[CascadingParameter] MainLayout MainLayout { get; set; }
    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        Console.WriteLine("OnAfterRender");
    //        Console.WriteLine(this.MainLayout.LoginDisplay);
    //        this.MainLayout.LoginDisplay.OnLoginClick += OnLoginClick;
    //    }
    //}

    //private void OnLoginClick(bool show)
    //{
    //    showSignIn = show;
    //    this.StateHasChanged();
    //}
    #endregion
    #region

    //NotifyService Class communication

    ////public async Task OnNotify()
    ////{
    ////    await InvokeAsync(() =>
    ////    {
    ////        StateHasChanged();
    ////    });
    ////}

    ////public void Dispose()
    ////{
    ////    NotifierService.Notify -= OnNotify;
    ////}
    #endregion
}